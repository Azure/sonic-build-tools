pipeline {
    agent { node { label 'jenkins-vstest-workers' } }

    stages {
        stage('Prepare') {
            steps {
                dir('sonic-utilities') {
                    checkout([$class: 'GitSCM',
                          branches: [[name: '${sha1}']],
                          userRemoteConfigs: [[url: 'https://github.com/Azure/sonic-utilities',
                                               refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                }
                copyArtifacts(projectName: 'common/sonic-swss-common-build', filter: '**/*.deb', target: 'swss-common', flatten: true)
                copyArtifacts(projectName: 'vs/sonic-swss-build', filter: '**/*.deb', target: 'swss', flatten: true)
                copyArtifacts(projectName: 'vs/sonic-sairedis-build', filter: '**/*.deb', target: 'sairedis', flatten: true)
                copyArtifacts(projectName: 'vs/buildimage-vs-all', filter: '**/*', target: 'buildimage', flatten: false)
            }
        }

        stage('Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonicdev-cr', usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWD')]) {
                    sh './scripts/common/sonic-utilities-build/build.sh'
                }
            }
        }

        stage('Cleanup') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    sh './scripts/lib/cleanup_vsdocker.sh'
                }
            }
        }

        stage('Test') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    sh './scripts/common/sonic-utilities-build/test.sh'
                }
            }
        }
    }
    post {

        always {
            junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'sonic-swss-tests/tests/tr.xml')
        }
        success {
            archiveArtifacts(artifacts: 'sonic-utilities/deb_dist/python-sonic-utilities_1.2-1_all.deb,wheels/sonic_config_engine-1.0-py2-none-any.whl,wheels/swsssdk-2.0.1-py2-none-any.whl,wheels/sonic_py_common-1.0-py2-none-any.whl,wheels/sonic_py_common-1.0-py3-none-any.whl, sonic-swss-tests/tests/log/**')
        }

        cleanup {
            cleanWs(disableDeferredWipeout: false, deleteDirs: true, notFailBuild: true)
        }
    }
}
