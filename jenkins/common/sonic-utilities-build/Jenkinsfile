pipeline {
    agent { node { label 'jenkins-vstest-workers' } }

    stages {
        stage('Prepare') {
            steps {
                dir('sonic-utilities') {
                    checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          userRemoteConfigs: [[url: 'https://github.com/Azure/sonic-utilities']]])
                }
                copyArtifacts(projectName: 'sonic-swss-common-build', filter: '**/*.deb', target: 'swss-common', flatten: true)
                copyArtifacts(projectName: '../vs/sonic-swss-build', filter: '**/*.deb', target: 'swss', flatten: true)
                copyArtifacts(projectName: '../vs/sonic-sairedis-build', filter: '**/*.deb', target: 'sairedis', flatten: true)
                copyArtifacts(projectName: '../vs/buildimage-vs-all', filter: '**/*', target: 'buildimage', flatten: false)
            }
        }

        stage('Build') {
            steps {
                sh './scripts/common/sonic-utilities-build/build.sh'
            }
        }


        stage('Test') {
            steps {
                sh './scripts/common/sonic-utilities-build/test.sh'
            }
        }
    }
    post {
        always {
            junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'sonic-swss/tests/tr.xml')
        }
        success {
            archiveArtifacts(artifacts: 'sonic-utilities/deb_dist/python-sonic-utilities_1.2-1_all.deb,wheels/sonic_config_engine-1.0-py2-none-any.whl,wheels/swsssdk-2.0.1-py2-none-any.whl, sonic-swss/tests/log/**')
        }
        fixed {
            slackSend(color:'#00FF00', message: "Build job back to normal: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        regression {
            slackSend(color:'#FF0000', message: "Build job Regression: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        cleanup {
            cleanWs(disableDeferredWipeout: false, deleteDirs: true, notFailBuild: true)
        }
    }
}
