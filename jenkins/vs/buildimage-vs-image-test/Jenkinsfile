pipeline {
    agent { node { label 'jenkins-vstest-workers' } }

    parameters {
        string(name: 'PROJECT', defaultValue: 'vs/buildimage-vs-image', description: 'which project to test')
        string(name: 'BUILD_NUM', defaultValue: '', description: 'which build to test')
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30'))
    }

    environment {
        SONIC_TEAM_TEST_WEBHOOK = credentials('sonic_team_test_webhook')
    }

    triggers {
        pollSCM('@midnight')
    }


    stages {
        stage('Prepare') {
            steps {
                dir('sonic-mgmt') {
                    checkout([$class: 'GitSCM',
                              branches: [[name: '*/master']],
                              userRemoteConfigs: [[url: 'https://github.com/Azure/sonic-mgmt']]])
                }
            }
        }

        stage('Download') {
            when {
                equals expected: '', actual: "${params.BUILD_NUM}"
            }
            steps {
                copyArtifacts(projectName: "${params.PROJECT}", filter: 'target/sonic-vs.img.gz', target: './', flatten: false)
            }
        }

        stage('Download2') {
            when {
                not { equals expected: '', actual: "${params.BUILD_NUM}" }
            }
            steps {
                copyArtifacts(projectName: "${params.PROJECT}", filter: 'target/sonic-vs.img.gz', selector: specific("${params.BUILD_NUM}"), target: './', flatten: false)
            }
        }

        stage('Test') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    lock(resource: "kvmtest_${env.NODE_NAME}") {
                        withCredentials([sshUserPrivateKey(credentialsId: '2b6b6afe-4892-41d1-967c-d683e7773727', keyFileVariable: 'PRIVATE_KEY'), \
                                         usernamePassword(credentialsId: 'sonicdev-cr', usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWD')]) {
                            sh './scripts/vs/buildimage-vs-image/test.sh'
                        }
                    }
				}
            }
        }

    }
    post {

        always {
            archiveArtifacts(artifacts: 'sonic-mgmt/tests/logs/**, sonic-mgmt/tests/results/**')
            junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'sonic-mgmt/tests/results/**/*.xml')
        }

        fixed {
            slackSend(color:'#00FF00', message: "Build job back to normal: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            office365ConnectorSend(webhookUrl: "${env.SONIC_TEAM_TEST_WEBHOOK}")
        }
        regression {
            slackSend(color:'#FF0000', message: "Build job Regression: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            office365ConnectorSend(webhookUrl: "${env.SONIC_TEAM_TEST_WEBHOOK}")
        }
        cleanup {
            cleanWs(disableDeferredWipeout: false, deleteDirs: true, notFailBuild: true)
        }
    }
}
