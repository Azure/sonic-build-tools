pipeline {
    agent { node { label 'jenkins-vstest-workers' } }

    stages {
        stage('Prepare') {
            steps {
                dir('swss') {
                    checkout([$class: 'GitSCM',
                              branches: [[name: '${sha1}']],
                              userRemoteConfigs: [[url: 'https://github.com/Azure/sonic-swss',
                                                   refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                }
                copyArtifacts(projectName: 'sonic-sairedis-build', filter: '**/*.deb', target: 'sairedis', flatten: true)
                copyArtifacts(projectName: 'common/sonic-swss-common-build', filter: '**/*.deb', target: 'common', flatten: true)
                copyArtifacts(projectName: 'common/sonic-utilities-build', filter: '**/*.deb', target: 'utilities', flatten: true)
                copyArtifacts(projectName: 'buildimage-vs-all', filter: '**/*.deb,**/docker-sonic-vs.gz', target: 'buildimage', flatten: false)
            }
        }

        stage('Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonicdev-cr', usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWD')]) {
                    sh './scripts/vs/sonic-swss-build/build.sh'
                }
            }
        }

        stage('Test') {
            steps {
                sh './scripts/vs/sonic-swss-build/test.sh'
            }
        }
    }
    post {
        cleanup {
            archiveArtifacts(artifacts: 'buildimage/target/docker-sonic-vs.gz, swss/tests/log/**, swss_*.deb, swss-dbg_*.deb, swss/tests/*.py')
            junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'swss/tests/tr.xml')
            cleanWs(disableDeferredWipeout: false, deleteDirs: true, notFailBuild: true)
        }
        fixed {
            slackSend(color:'#00FF00', message: "Build job back to normal: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        regression {
            slackSend(color:'#FF0000', message: "Build job Regression: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
