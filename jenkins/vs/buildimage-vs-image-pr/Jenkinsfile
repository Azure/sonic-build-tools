pipeline {
    agent { node { label 'jenkins-kvmtest-workers' } }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '60'))

    }

    stages {
        stage('Prepare') {
            steps {
                dir('sonic-buildimage') {
                    checkout([$class: 'GitSCM',
                          branches: [[name: '${sha1}']],
                          extensions: [[$class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        parentCredentials: false,
                                        recursiveSubmodules: true,
                                        reference: '',
                                        trackingSubmodules: false]],
                          userRemoteConfigs: [[url: 'http://github.com/Azure/sonic-buildimage',
                                               refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                }
            }
        }

        stage('Build') {
            steps {
                sh '''#!/bin/bash -xe

cd sonic-buildimage

git submodule foreach --recursive '[ -f .git ] && echo "gitdir: $(realpath --relative-to=. $(cut -d" " -f2 .git))" > .git'

CACHE_OPTIONS="SONIC_DPKG_CACHE_METHOD=rcache SONIC_DPKG_CACHE_SOURCE=/nfs/dpkg_cache/vs"
make configure PLATFORM=vs

sudo bash -c "echo 1 > /proc/sys/vm/compact_memory"

make SONIC_CONFIG_BUILD_JOBS=1 $CACHE_OPTIONS target/sonic-vs.bin

rm -rf ../target
mv target ../

# copy image to scratchpad
sudo cp ../target/sonic-vs.bin /nfs/jenkins/sonic-vs-${JOB_NAME##*/}.${BUILD_NUMBER}.bin
'''
            }
        }

        stage('Test') {
            agent { node { label 'jenkins-vstest-workers' } }

            steps {
                dir('sonic-mgmt') {
                    checkout([$class: 'GitSCM',
                              branches: [[name: '*/master']],
                              userRemoteConfigs: [[url: 'https://github.com/Azure/sonic-mgmt']]])
                }

                dir('sonic-buildimage') {
                    checkout([$class: 'GitSCM',
                          branches: [[name: '${sha1}']],
                          extensions: [[$class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        parentCredentials: false,
                                        recursiveSubmodules: false,
                                        reference: '',
                                        trackingSubmodules: false]],
                          userRemoteConfigs: [[url: 'http://github.com/Azure/sonic-buildimage',
                                               refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                }

                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
                    lock(resource: "kvmtest_${env.NODE_NAME}") {
                        withCredentials([sshUserPrivateKey(credentialsId: '2b6b6afe-4892-41d1-967c-d683e7773727', keyFileVariable: 'PRIVATE_KEY'), \
                                         usernamePassword(credentialsId: 'sonicdev-cr', usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWD')]) {
                            sh './scripts/vs/buildimage-vs-image/build_kvm_image.sh'
                            sh './scripts/vs/buildimage-vs-image/test.sh'
				        }
                    }
                }
            }

            post {
                always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'sonic-mgmt/tests/results/**/*.xml')
                    archiveArtifacts(artifacts: 'target/**, sonic-mgmt/tests/results/**, sonic-mgmt/tests/logs/**')
                }
            }
        }
    }

    post {

        always {
            archiveArtifacts(artifacts: 'target/**')
        }
    }
}
