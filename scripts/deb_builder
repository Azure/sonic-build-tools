#!/usr/bin/python
#
# Copyright (c) 2015 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN #AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
#  LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.
#

import os
import sys
import subprocess
import shutil

def dpkg_install(__pkgs):
  _deb_path = os.getenv('DEB_BINS','..')
  print('Debian cache in %s' %(_deb_path))

  #look at the path specified that contains debian files and list all 
  #files
  _files=[]
  if os.path.exists(_deb_path):
    for i in os.listdir(_deb_path):
      if '.deb' in i:
        _files.append(i)
   
  #add any files that you find that match the input prefixes 
  __pkgs_new=[]
  for i in __pkgs:
    for j in _files:
      if i in j:
        __pkgs_new.append( os.path.join(_deb_path,j) )

  __pkgs = __pkgs_new

  print('Installing the following packages')
  print(' '.join(__pkgs))
  __pkgs = ['dpkg','-i'] + __pkgs

  sys.stdout.flush()

  p = subprocess.Popen(__pkgs)
  print (p.communicate()[0])

def apt_get_install(_keep_default_sources, __pkgs):
  print('Apt-getting the following packages')
  print(' '.join(__pkgs))
  
  if not _keep_default_sources:
    os.remove('/etc/apt/sources.list')
  
  shutil.copyfile('/tools-config/sonic-nas.sources.list','/etc/apt/sources.list.d/nas.list')

  p = subprocess.Popen(['apt-get','update'])
  print (p.communicate()[0])

  __pkgs = ['apt-get','install','-y','--force-yes'] + __pkgs

  sys.stdout.flush()

  p = subprocess.Popen(__pkgs)
  print (p.communicate()[0])

def main():
  __params=[]
  __dpkg_pkgs=[]
  __apt_pkgs=[]

  __scripts=[]

  
  if len(sys.argv) < 3:
    print('Invalid params... ')
    print('%s repo_path ' % (sys.argv[0]) )
    print sys.argv
    sys.exit(-1)
  
  dir=sys.argv[1]
   
  os.chdir(dir)
  _args = sys.argv[2:]
  
  print('Building in %s' %(os.getcwd()))
  sys.stdout.flush()
  try:
    os.remove(".finished.build")
  except:
    pass
  _use_apt = False
  _keep_default_sources=False

  __params = __dpkg_pkgs

  for i in _args:
    if i.find('--dpkg')!=-1:
      __params = __dpkg_pkgs
      continue

    if i.find('--apt')!=-1:
      __params = __apt_pkgs
      continue

    if i.find('--keep-def-sources')!=-1:
      _keep_default_sources=True
      continue

    if i == '--':
      __pkgs = __params
      __params = []
      continue
    __params.append(i)

  if len(__dpkg_pkgs) > 0:
    dpkg_install(__dpkg_pkgs)

  if len(__apt_pkgs) > 0:
    apt_get_install(_keep_default_sources,__apt_pkgs)

  __params = [ 'fakeroot', 'debian/rules' ] + __params
  for i in __scripts:
    print (i.split(' '))
    p = subprocess.Popen([i])
    print (p.communicate()[0])

  sys.stdout.flush()
  
  _local_env = os.environ.copy()
  p = subprocess.Popen(__params,env=_local_env)
  print ("Building with %s" %(' '.join(__params)))
  print (p.communicate()[0])
  _rc = p.wait()
  if (_rc==0):
    print('Build was successful')
    with open(".finished.build","w") as f:
      f.write("");
  else:
    print('Build failed')
  sys.exit(_rc)

if __name__=='__main__':
  main()

#essentially the following 
#dpkg -i packages
#apt-get install packages

#fakeroot debian/rules $*
